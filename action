#!/usr/bin/osascript
global gp

on run argv
  set gp to "play.google.com/music"
  set debug to true

  -- parse arguments
  set command to item 1 of argv
  if (count of argv) > 1 then
    set sub1 to item 2 of argv
  else
    set sub1 to false
  end if

  if (count of argv) > 2 then
    set sub2 to item 3 of argv
  else
    set sub2 to false
  end if

  -- open google play music if not already open
  if (not is_open(gp))
    open_url("https://" & gp)
    delay 1.5
  end if

  -- install companion js
  set gpc_installed to run_js(gp, "typeof window.__C")
  if (debug or not gpc_installed = "object") then
    run_js(gp, (read (POSIX path of ((path to me as text) & "::") & "gp_companion.js")))
  end if

  set status to companion("get_status", {})
  set track_number to companion("get_track_number", {})
  set title to companion("get_title", {})
  set artist to companion("get_artist", {})
  set album to companion("get_album", {})
  set duration to companion("get_duration", {})
  set position to companion("get_position", {})

  if (command = "status") then
    return "{
      \"status\": \"" & status & "\",
      \"track_number\": \"" & track_number & "\",
      \"title\": \"" & replace_chars(replace_chars(title, "\\", "\\\\"), "\"", "\\\"") & "\",
      \"artist\": \"" & replace_chars(replace_chars(artist, "\\", "\\\\"), "\"", "\\\"") & "\",
      \"album\": \"" & replace_chars(replace_chars(album, "\\", "\\\\"), "\"", "\\\"") & "\",
      \"duration\": \"" & duration & "\",
      \"position\": \"" & position & "\"
    }"
  else if (command = "play") then
    companion("play", {sub1, sub2})
    return "[]"
  else if (command = "pause") then
    companion("pause", {})
    return "[]"
  else if (command = "search") then
    return companion("search", {sub1, sub2})
  else if (command = "artist") then
    return companion("artist", {sub1, sub2})
  end if
  return "{\"error\": \"unknown command " & command & "\"}"
end run

on is_open(website)
  tell application "Google Chrome"
    repeat with w in (every window)
      repeat with t in (every tab whose URL contains website) of w
        return true
      end repeat
    end repeat
  end tell
  return false
end is_open

on open_url(website)
  tell application "Google Chrome"
    tell (make new window)
      set URL of active tab to website
      -- keystroke "m" using command down
    end tell
  end tell
  return true
end open_url

on run_js(website, js)
  tell application "Google Chrome"
    repeat with w in (every window)
      repeat with t in (every tab whose URL contains website) of w
        tell t
          execute javascript js
          get result
          return result
        end tell
      end repeat
    end repeat
  end tell
end run_js

on companion(command, params)
  set results to {}
  if (count of params > 0) then
    repeat with p in params
      if ((class of p) is text) then
        set results to results & ("\"" & p & "\"")
      else
        set results to results & (p)
      end if
    end repeat
  end if
  set results to run_js(gp, "__C." & command & "(" & join(results, ",") & ")")
  repeat while ((class of results) is record)
    set wait_for to processing of results
    set results to false
    repeat while results = false
      delay 0.1
      set results to run_js(gp, "__C." & wait_for)
    end repeat
  end repeat
  if (results = false) then
    return "[]"
  end if
  return results
end companion


on replace_chars(this_text, search_string, replacement_string)
  set AppleScript's text item delimiters to the search_string
  set the item_list to every text item of this_text
  set AppleScript's text item delimiters to the replacement_string
  set this_text to the item_list as string
  set AppleScript's text item delimiters to ""
  return this_text
end replace_chars

on join(theList, delim)
  set newString to ""
  set oldDelims to AppleScript'stext item delimiters
  set AppleScript'stext item delimiters to delim
  set newString to theList as string
  set AppleScript'stext item delimiters to oldDelims
  return newString
end join
